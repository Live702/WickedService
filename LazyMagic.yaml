LazyMagicDirectivesVersion: 2.0.0

Directives:
# Cross cutting directives

  # SCHEMAS Default
  SchemaDefault:
    Type: Schema
    IsDefault: true # this directive may be referenced by other Schema directives
    Artifacts:
      DotNetSchemaProject: # system DTOs classes
      DotNetRepoProject: # DynamoDB CRUDL methods for DTOs

  # MODULES Default 
  ModuleDefault:
    Type: Module
    IsDefault: true # this directive may be referenced by other Module directives
    Artifacts:
      DotNetControllerProject: # methods for each REST path operation

  # CONTAINERS Default  
  AwsApiLambdaContainerDefault:
    Type: Container
    IsDefault: true # this directive may be referenced by other Container directives
    Artifacts:
      DotNetApiLambdaProject: # Lambda function that processes the HttpApi request
      AwsApiLambdaResource: # AWS SAM template resource for the Lambda function
        ManagedPolicyArns: 
        # You can further restict this using the Perms stack
        # if you want to restrict db access by lambda
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  # API Default
  ApiDefault:
    Type: Api
    IsDefault: true # this directive may be referenced by other Api directives
    Artifacts:
      AwsHttpApiResource: # AWS SAM template resource for the HttpApi
      DotNetHttpApiSDKProject: # Client SDK for the Api

  # WEBAPP Default
  WebAppDefault:
    Type: WebApp # this directive may be referenced by other WebApp directives
    IsDefault: true

  # TENANCY Default
  TenancyDefaults:
    Type: Tenancy
    IsDefault: true # this directive may be referenced by other Tenancy directives
    Service: Service

  # AUTHENTICATORS - Authentication services
  TenantAuth:
    Type: Authentication
    Artifacts:
      AwsCognitoResource: 
        Template: Templates/sam.cognito.tenant.yaml

  ConsumerAuth:
    Type: Authentication
    Artifacts:
      AwsCognitoResource:
        Template: Templates/sam.cognito.consumer.yaml

# Application Directives

  ConsumerSchema:
    Type: Schema
    Defaults: SchemaDefault
    OpenApiSpecs:
    - openapi.consumer-schema.yaml

  SharedSchema:
    Type: Schema
    Defaults: SchemaDefault
    OpenApiSpecs:
    - openapi.shared-schema.yaml

  StoreSchema:
    Type: Schema
    Defaults: SchemaDefault
    OpenApiSpecs:
    - openapi.store-schema.yaml

  AdminSchema:
    Type: Schema
    Defaults: SchemaDefault
    OpenApiSpecs:
    - openapi.admin-schema.yaml

  PublicSchema:
    Type: Schema
    Defaults: SchemaDefault
    OpenApiSpecs:
    - openapi.public-schema.yaml

  # MODULES - libraries handling paths
 
  AdminModule:
    Type: Module
    Defaults: ModuleDefault
    OpenApiSpecs:
    - openapi.admin.yaml

  StoreModule:
    Type: Module
    Defaults: ModuleDefault
    OpenApiSpecs:
    - openapi.store.yaml

  ConsumerModule:
    Type: Module
    Defaults: ModuleDefault
    OpenApiSpecs:
    - openapi.consumer.yaml

  PublicModule:
    Type: Module
    Defaults: ModuleDefault
    OpenApiSpecs:
    - openapi.public.yaml

  # CONTAINERS - executables
 
  AdminLambda:
    Type: Container
    ApiPrefix: Admin
    Defaults: AwsApiLambdaContainerDefault
    Modules:
    - AdminModule
    Artifacts:
      AwsApiLambdaResource: # AWS SAM template resource for the Lambda function
        ManagedPolicyArns:
        # You can further restict permissions using the Perms stack but 
        # generally the admin module has full access to most services.
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  StoreLambda:
    Type: Container
    ApiPrefix: Store
    Defaults: AwsApiLambdaContainerDefault
    Modules:
    - StoreModule

  ConsumerLambda:
    Type: Container
    ApiPrefix: Consumer
    Defaults: AwsApiLambdaContainerDefault
    Modules:
    - ConsumerModule

  PublicLambda:
    Type: Container
    ApiPrefix: Public
    Defaults: AwsApiLambdaContainerDefault
    Modules:
    - PublicModule

  # APIS - API Gateways that proxy requests to containers
  AdminApi:
    Type: Api
    Defaults: ApiDefault
    Authentication: TenantAuth
    Containers:
    - AdminLambda

  StoreApi:
    Type: Api
    Defaults: ApiDefault
    Authentication: TenantAuth
    Containers:
    - StoreLambda
    - ConsumerLambda
    - PublicLambda

  ConsumerApi:
    Type: Api
    Defaults: ApiDefault
    Authentication: ConsumerAuth
    Containers:
    - ConsumerLambda
    - PublicLambda

  PublicApi:
    Type: Api
    Defaults: ApiDefault
    Containers:
    - PublicLambda

  # Service
  Service:
    Type: Service
    Apis: # remember that each Api has it's own ClientSDK
    - AdminApi
    - StoreApi
    - ConsumerApi
    - PublicApi
    Artifacts:
      AwsServiceStackTemplate:

  LocalWebService:
    Type: Service
    Apis:
    - AdminApi
    - StoreApi
    - ConsumerApi
    - PublicApi
    Artifacts:
      DotNetLocalWebApiProject:

# DEPLOYMENT 
  Deployment:
    Type: Deployment
    Artifacts:
      AwsDeploymentConfig:

# WEBAPPS
  AdminApp:
    Type: WebApp
    Defaults: WebAppDefault
    Path: admin
    Apis:
    - AdminApi
    - StoreApi
    - ConsumerApi
    - PublicApi

  StoreApp:
    Type: WebApp
    Defaults: WebAppDefault
    Path: store 
    Apis:
    - StoreApi
    - ConsumerApi
    - PublicApi

  WickedApp:
    Type: WebApp
    Defaults: WebAppDefault
    Path: app
    Apis:
    - ConsumerApi
    - PublicApi

# TENANCIES
  Tenancy:
    Type: Tenancy
    Defaults: TenancyDefaults
    WebApps:
    - AdminApp
    - StoreApp
    - WickedApp

