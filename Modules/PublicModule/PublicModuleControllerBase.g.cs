// NSWAG code refactored by LazyMagic.
// We use NSWAG to generate a baseclass, partial class and interface. 
// I{ModuleName}Controller.g.cs - defines a partial interface
// {ModuleName}ControllerBase.g.cs - defines the base class
// {ModuleName}Controller.g.cs - defines a partial class that inherits the base class
// To add or override class behavior, create a new partial class file
// {projectName}Controller.cs - overrides methods in the base class
// Dependency Injection system.
// Note: We also generate some helper classes 
// {ModuleName}Authorization.g.cs - Partial class for Authorization system
// {ModuleName}Registration.g.cs - Registers classes with the DI system
//
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.3.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace PublicModule
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.3.0))")]

    public abstract class PublicModuleControllerBase : Controller, IPublicModuleController
    {

        /// <summary>
        /// List all pets
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpGet, Route("public/pet/listPets")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Pet>>> ListPets()
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PetRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <remarks>
        /// Multiple status values can be provided with comma separated strings
        /// </remarks>
        /// <param name="petStatus">Status values that need to be considered for filter</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("public/pet/findByStatus")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Pet>>> FindPetsByStatus([FromQuery] System.Collections.Generic.IEnumerable<PetStatus> petStatus)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <remarks>
        /// Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing.
        /// </remarks>
        /// <param name="tags">Tags to filter by</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("public/pet/findByTags")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Pet>>> FindPetsByTags([FromQuery] System.Collections.Generic.IEnumerable<string> tags)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Get all Pet Categories
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpGet, Route("public/pet/categories")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Category>>> GetPetCategories()
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await CategoryRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// Get all Pet Tags
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpGet, Route("public/pet/tags")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Tag>>> GetPetTags()
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await TagRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// Update an existing message
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPut, Route("message")]
        public virtual async Task<ActionResult<Message>> UpdateMessage([FromBody] Message body)
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await MessageRepo.UpdateAsync(callerInfo, body);
        }
        /// <summary>
        /// Create Message
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPost, Route("message")]
        public virtual async Task<ActionResult<Message>> CreateMessage([FromBody] Message body)
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await MessageRepo.CreateAsync(callerInfo, body);
        }
        /// <summary>
        /// List all Messages
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpGet, Route("public/message/listMessages")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Message>>> ListMessages()
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await MessageRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// Update an existing premise
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPut, Route("premise")]
        public virtual async Task<ActionResult<Premise>> UpdatePremise([FromBody] Premise body)
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PremiseRepo.UpdateAsync(callerInfo, body);
        }
        /// <summary>
        /// Create Premise
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPost, Route("premise")]
        public virtual async Task<ActionResult<Premise>> CreatePremise([FromBody] Premise body)
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PremiseRepo.CreateAsync(callerInfo, body);
        }
        /// <summary>
        /// List all Premises
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpGet, Route("premise/listPremises")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Premise>>> ListPremises()
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PremiseRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <param name="petId">ID of pet to return</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("public/pet/{petId}")]
        public virtual async Task<ActionResult<Pet>> GetPetById(string petId)
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PetRepo.ReadAsync(callerInfo, petId);
        }
        /// <summary>
        /// Read message b y id
        /// </summary>
        /// <param name="id">ID of pet to return</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("message/{id}")]
        public virtual async Task<ActionResult<Message>> GetMessageById(string id)
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await MessageRepo.ReadAsync(callerInfo, callerInfo.LzUserId);
        }
        /// <summary>
        /// Read premise b y id
        /// </summary>
        /// <param name="id">ID of pet to return</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("premise/{id}")]
        public virtual async Task<ActionResult<Premise>> GetPremiseById(string id)
        {
            var callerInfo = await PublicModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PremiseRepo.ReadAsync(callerInfo, callerInfo.LzUserId);
        }
		public IPublicModuleAuthorization PublicModuleAuthorization { get; set; }
		public ICategoryRepo CategoryRepo { get; set; }
		public ITagRepo TagRepo { get; set; }
		public IPetRepo PetRepo { get; set; }
		public IOrderRepo OrderRepo { get; set; }
		public IBadaRepo BadaRepo { get; set; }
		public IMessageRepo MessageRepo { get; set; }
		public IPremiseRepo PremiseRepo { get; set; }
		protected virtual void Init() { }
    }


}
