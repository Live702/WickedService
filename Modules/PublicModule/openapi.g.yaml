openapi: 3.0.1
paths:
  /public/pet/listPets:
    get:
      summary: List all pets
      operationId: listPets
      x-lz-gencall: PetRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
  /public/pet/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - name: petStatus
        in: query
        description: Status values that need to be considered for filter
        required: true
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/PetStatus'
          default: available
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
  /public/pet/findByTags:
    get:
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid tag value
  /public/pet/categories:
    get:
      summary: Get all Pet Categories
      operationId: getPetCategories
      x-lz-gencall: CategoryRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /public/pet/tags:
    get:
      summary: Get all Pet Tags
      operationId: getPetTags
      x-lz-gencall: TagRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /message:
    put:
      summary: Update an existing message
      operationId: updateMessage
      x-lz-gencall: MessageRepo.UpdateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Invalid ID supplied
        404:
          description: Message not found
        405:
          description: Validation exception
    post:
      summary: Create Message
      operationId: createMessage
      x-lz-gencall: MessageRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /public/message/listMessages:
    get:
      summary: List all Messages
      operationId: listMessages
      x-lz-gencall: MessageRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        400:
          description: Invalid status value
  /premise:
    put:
      summary: Update an existing premise
      operationId: updatePremise
      x-lz-gencall: PremiseRepo.UpdateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Premise'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Premise'
        400:
          description: Invalid ID supplied
        404:
          description: Premise not found
        405:
          description: Validation exception
    post:
      summary: Create Premise
      operationId: createPremise
      x-lz-gencall: PremiseRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Premise'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Premise'
  /premise/listPremises:
    get:
      summary: List all Premises
      operationId: listPremises
      x-lz-gencall: PremiseRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Premise'
        400:
          description: Invalid status value
  '/public/pet/{petId}':
    get:
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      x-lz-gencall: PetRepo.ReadAsync(callerInfo, petId)
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
  '/message/{id}':
    get:
      summary: Read message b y id
      operationId: getMessageById
      x-lz-gencall: MessageRepo.ReadAsync(callerInfo, callerInfo.LzUserId)
      parameters:
      - name: id
        in: path
        description: ID of pet to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  '/premise/{id}':
    get:
      summary: Read premise b y id
      operationId: getPremiseById
      x-lz-gencall: PremiseRepo.ReadAsync(callerInfo, callerInfo.LzUserId)
      parameters:
      - name: id
        in: path
        description: ID of pet to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Premise'
components:
  schemas:
    Preferences:
      type: object
      properties:
        id:
          type: string
        theme:
          type: string
          enum:
          - light
          - dark
        locale:
          type: string
          enum:
          - en
          - fr
          - es
        petStatus:
          description: pet status in the store
          $ref: '#/components/schemas/PetStatus'
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        pet:
          $ref: '#/components/schemas/Pet'
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
    Tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
    Pet:
      type: object
      required:
      - name
      - photoUrls
      properties:
        id:
          type: string
        category:
          type: string
        name:
          type: string
          example: Dog
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        petStatus:
          description: pet status in the store
          default: available
          $ref: '#/components/schemas/PetStatus'
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    PetStatus:
      type: string
      description: pet status in the store
      enum:
      - available
      - pending
      - sold
    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          description: Cognito Identity Id of clerk entering order
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        orderStatus:
          title: orderStatus
          description: Order Status
          $ref: '#/components/schemas/OrderStatus'
        complete:
          type: boolean
          default: false
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    OrderStatus:
      type: string
      description: Order Status
      enum:
      - placed
      - approved
      - delivered
    Subtenant:
      type: object
      x-csharp-type: TenancyConfig
    TenantUser:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
          nullable: true
        name:
          type: string
        email:
          type: string
        phone:
          type: string
          nullable: true
        employee:
          type: boolean
        admin:
          type: boolean
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    TenantUserStatus:
      type: object
      properties:
        isAdmin:
          type: boolean
      x-lz-genrepo: true
    Bada:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
    Message:
      type: object
      properties:
        id:
          type: string
        body:
          type: string
        premiseId:
          type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Premise:
      type: object
      properties:
        id:
          type: string
        body:
          type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
...
