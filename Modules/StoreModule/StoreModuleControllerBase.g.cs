// NSWAG code refactored by LazyMagic.
// We use NSWAG to generate a baseclass, partial class and interface. 
// I{ModuleName}Controller.g.cs - defines a partial interface
// {ModuleName}ControllerBase.g.cs - defines the base class
// {ModuleName}Controller.g.cs - defines a partial class that inherits the base class
// To add or override class behavior, create a new partial class file
// {projectName}Controller.cs - overrides methods in the base class
// Dependency Injection system.
// Note: We also generate some helper classes 
// {ModuleName}Authorization.g.cs - Partial class for Authorization system
// {ModuleName}Registration.g.cs - Registers classes with the DI system
//
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.3.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace StoreModule
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.3.0))")]

    public abstract class StoreModuleControllerBase : Controller, IStoreModuleController
    {

        /// <summary>
        /// List all pets
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpGet, Route("pet/listPets")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Pet>>> ListPets()
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PetRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <remarks>
        /// Multiple status values can be provided with comma separated strings
        /// </remarks>
        /// <param name="petStatus">Status values that need to be considered for filter</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("pet/findByStatus")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Pet>>> FindPetsByStatus([FromQuery] System.Collections.Generic.IEnumerable<PetStatus> petStatus)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPost, Route("pet")]
        public virtual async Task<ActionResult<Pet>> AddPet([FromBody] Pet body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PetRepo.CreateAsync(callerInfo, body);
        }
        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPut, Route("pet")]
        public virtual async Task<ActionResult<Pet>> UpdatePet([FromBody] Pet body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PetRepo.UpdateAsync(callerInfo, body);
        }
        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <remarks>
        /// Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing.
        /// </remarks>
        /// <param name="tags">Tags to filter by</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("pet/findByTags")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Pet>>> FindPetsByTags([FromQuery] System.Collections.Generic.IEnumerable<string> tags)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Get all Pet Categories
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpGet, Route("pet/categories")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Category>>> GetPetCategories()
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await CategoryRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// Get all Pet Tags
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpGet, Route("pet/tags")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Tag>>> GetPetTags()
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await TagRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <remarks>
        /// Returns a map of status codes to quantities
        /// </remarks>
        /// <returns>successful operation</returns>
        [HttpGet, Route("order/inventory")]
        public virtual async Task<ActionResult<System.Collections.Generic.IDictionary<string, int>>> GetInventory()
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <param name="body">order placed for purchasing the pet</param>
        /// <returns>successful operation</returns>
        [HttpPost, Route("order")]
        public virtual async Task<ActionResult<Order>> PlaceOrder([FromBody] Order body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await OrderRepo.CreateAsync(callerInfo, body);
        }
        /// <summary>
        /// Add a new blurb to the store
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPost, Route("blurb")]
        public virtual async Task<ActionResult<Blurb>> CreateBlurb([FromBody] Blurb body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await BlurbRepo.CreateAsync(callerInfo, body);
        }
        /// <summary>
        /// Update an existing blurb
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPut, Route("blurb")]
        public virtual async Task<ActionResult<Blurb>> UpdateBlurb([FromBody] Blurb body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await BlurbRepo.UpdateAsync(callerInfo, body);
        }
        /// <summary>
        /// List all blurbs
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpGet, Route("blurb/listBlurbs")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Blurb>>> ListBlurbs()
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await BlurbRepo.ListAsync(callerInfo);
        }
        /// <summary>
        /// List Blurbs by status
        /// </summary>
        /// <remarks>
        /// Status
        /// </remarks>
        /// <param name="blurbStatus">Status value</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("blurb/ListByStatus")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Blurb>>> ListBlurbsByStatus([FromQuery] string blurbStatus)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await BlurbRepo.ListBlurbsByStatusAsync(callerInfo, blurbStatus);
        }
        /// <summary>
        /// Add a new message to the store
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPost, Route("message")]
        public virtual async Task<ActionResult<Message>> CreateMessage([FromBody] Message body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await MessageRepo.CreateAsync(callerInfo, body);
        }
        /// <summary>
        /// Update an existing message
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPut, Route("message")]
        public virtual async Task<ActionResult<Message>> UpdateMessage([FromBody] Message body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await MessageRepo.UpdateAsync(callerInfo, body);
        }
        /// <summary>
        /// Add a new premise to the store
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPost, Route("premise")]
        public virtual async Task<ActionResult<Premise>> CreatePremise([FromBody] Premise body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PremiseRepo.CreateAsync(callerInfo, body);
        }
        /// <summary>
        /// Update an existing premise
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPut, Route("premise")]
        public virtual async Task<ActionResult<Premise>> UpdatePremise([FromBody] Premise body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PremiseRepo.UpdateAsync(callerInfo, body);
        }
        /// <summary>
        /// Add a new chat to the store
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPost, Route("chat")]
        public virtual async Task<ActionResult<Chat>> CreateChat([FromBody] Chat body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await ChatRepo.CreateAsync(callerInfo, body);
        }
        /// <summary>
        /// Update an existing chat
        /// </summary>
        /// <returns>successful operation</returns>
        [HttpPut, Route("chat")]
        public virtual async Task<ActionResult<Chat>> UpdateChat([FromBody] Chat body)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await ChatRepo.UpdateAsync(callerInfo, body);
        }
        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <param name="petId">ID of pet to return</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("pet/{petId}")]
        public virtual async Task<ActionResult<Pet>> GetPetById(string petId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PetRepo.ReadAsync(callerInfo, petId);
        }
        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name="petId">Pet id to delete</param>
        /// <returns>Success</returns>
        [HttpDelete, Route("pet/{petId}")]
        public virtual async Task<IActionResult> DeletePet(string petId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PetRepo.DeleteAsync(callerInfo, petId);
        }
        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <remarks>
        /// For valid response try integer IDs with value &gt;= 1 and &lt;= 10.\ \ Other values will generated exceptions
        /// </remarks>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("order/{orderId}")]
        public virtual async Task<ActionResult<Order>> GetOrderById(string orderId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await OrderRepo.ReadAsync(callerInfo, orderId);
        }
        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        /// <returns>Success</returns>
        [HttpDelete, Route("order/{orderId}")]
        public virtual async Task<IActionResult> DeleteOrder(string orderId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await OrderRepo.DeleteAsync(callerInfo, orderId);
        }
        /// <summary>
        /// Read blurb by ID
        /// </summary>
        /// <remarks>
        /// Returns a single blurb
        /// </remarks>
        /// <param name="blurbId">ID of blurb to return</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("blurb/{blurbId}")]
        public virtual async Task<ActionResult<Blurb>> ReadBlurbById(string blurbId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await BlurbRepo.ReadAsync(callerInfo, blurbId);
        }
        /// <summary>
        /// Deletes a blurb
        /// </summary>
        /// <param name="blurbId">Blurb id to delete</param>
        /// <returns>Success</returns>
        [HttpDelete, Route("blurb/{blurbId}")]
        public virtual async Task<IActionResult> DeleteBlurb(string blurbId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await BlurbRepo.DeleteAsync(callerInfo, blurbId);
        }
        /// <summary>
        /// Read message by ID
        /// </summary>
        /// <remarks>
        /// Returns a single message
        /// </remarks>
        /// <param name="messageId">ID of message to return</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("message/{messageId}")]
        public virtual async Task<ActionResult<Message>> ReadMessageById(string messageId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await MessageRepo.ReadAsync(callerInfo, messageId);
        }
        /// <summary>
        /// Deletes a message
        /// </summary>
        /// <param name="messageId">Message id to delete</param>
        /// <returns>Success</returns>
        [HttpDelete, Route("message/{messageId}")]
        public virtual async Task<IActionResult> DeleteMessage(string messageId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await MessageRepo.DeleteAsync(callerInfo, messageId);
        }
        /// <summary>
        /// List Messages by ChatId
        /// </summary>
        /// <remarks>
        /// Lists messages by chatId
        /// </remarks>
        /// <param name="chatId">ChatId message belongs to</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("message/ListByChatId/{chatId}")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Message>>> ListMessagesByChatId([FromQuery] string chatId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await MessageRepo.ListMessagesByChatIdAsync(callerInfo, chatId);
        }
        /// <summary>
        /// Read premise by ID
        /// </summary>
        /// <remarks>
        /// Returns a single premise
        /// </remarks>
        /// <param name="premiseId">ID of premise to return</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("premise/{premiseId}")]
        public virtual async Task<ActionResult<Premise>> ReadPremiseById(string premiseId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PremiseRepo.ReadAsync(callerInfo, premiseId);
        }
        /// <summary>
        /// Deletes a premise
        /// </summary>
        /// <param name="premiseId">Premise id to delete</param>
        /// <returns>Success</returns>
        [HttpDelete, Route("premise/{premiseId}")]
        public virtual async Task<IActionResult> DeletePremise(string premiseId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PremiseRepo.DeleteAsync(callerInfo, premiseId);
        }
        /// <summary>
        /// List Premises by blurbId
        /// </summary>
        /// <remarks>
        /// List Premiess by blurbId
        /// </remarks>
        /// <param name="blurbId">BlurbId the premise belongs to</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("premise/listByBlurbId/{blurbId}")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Premise>>> ListPremisesByBlurbId([FromQuery] string blurbId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await PremiseRepo.ListPremisesByBlurbIdAsync(callerInfo, blurbId);
        }
        /// <summary>
        /// Read chat by ID
        /// </summary>
        /// <remarks>
        /// Returns a single chat
        /// </remarks>
        /// <param name="chatId">ID of chat to return</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("chat/{chatId}")]
        public virtual async Task<ActionResult<Chat>> ReadChatById(string chatId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await ChatRepo.ReadAsync(callerInfo, chatId);
        }
        /// <summary>
        /// Deletes a chat
        /// </summary>
        /// <param name="chatId">Chat id to delete</param>
        /// <returns>Success</returns>
        [HttpDelete, Route("chat/{chatId}")]
        public virtual async Task<IActionResult> DeleteChat(string chatId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await ChatRepo.DeleteAsync(callerInfo, chatId);
        }
        /// <summary>
        /// List Chats by blurbId
        /// </summary>
        /// <remarks>
        /// blurbId value chat belongs to
        /// </remarks>
        /// <param name="blurbId">BlurbId chat belongs to</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("chat/listByBlurbId/{blurbId}")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Chat>>> ListChatsByBlurbId([FromQuery] string blurbId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await ChatRepo.ListChatsByBlurbIdAsync(callerInfo, blurbId);
        }
        /// <summary>
        /// List Chats by premiseId
        /// </summary>
        /// <remarks>
        /// premiseId value chat belongs to
        /// </remarks>
        /// <param name="premiseId">PremiseId chat belongs to</param>
        /// <returns>successful operation</returns>
        [HttpGet, Route("chat/listByPremiseId/{premiseId}")]
        public virtual async Task<ActionResult<System.Collections.Generic.ICollection<Chat>>> ListChatsByPremiseId([FromQuery] string premiseId)
        {
            var callerInfo = await StoreModuleAuthorization.GetCallerInfoAsync(this.Request);
            return await ChatRepo.ListChatsByPremiseIdAsync(callerInfo, premiseId);
        }
		public IStoreModuleAuthorization StoreModuleAuthorization { get; set; }
		public IBlurbRepo BlurbRepo { get; set; }
		public IMessageRepo MessageRepo { get; set; }
		public IPremiseRepo PremiseRepo { get; set; }
		public IChatRepo ChatRepo { get; set; }
		public ICategoryRepo CategoryRepo { get; set; }
		public ITagRepo TagRepo { get; set; }
		public IPetRepo PetRepo { get; set; }
		public IOrderRepo OrderRepo { get; set; }
		protected virtual void Init() { }
    }


}
