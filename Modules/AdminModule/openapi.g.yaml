openapi: 3.0.1
paths:
  /isAdmin:
    get:
      summary: Check if currently logged in tenantUser is an admin
      operationId: isAdmin
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantUserStatus'
  /tenantUser:
    post:
      summary: Add a new tenantUser
      operationId: addTenantUser
      x-lz-gencall: TenantUserRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUser'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantUser'
        405:
          description: Invalid input
    put:
      summary: Update an existing tenantUser
      operationId: updateTenantUser
      x-lz-gencall: TenantUserRepo.UpdateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUser'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantUser'
        400:
          description: Invalid ID supplied
        404:
          description: TenantUser not found
        405:
          description: Validation exception
  /tenantUser/listTenantUsers:
    get:
      summary: List all tenantUsers
      operationId: listTenantUsers
      x-lz-gencall: TenantUserRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantUser'
        400:
          description: Invalid status value
  /subtenant:
    post:
      summary: Add a new Subtenant
      operationId: addSubtenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subtenant'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subtenant'
        405:
          description: Invalid input
    put:
      summary: Update an existing Subtenant
      operationId: updateSubtenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subtenant'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subtenant'
        400:
          description: Invalid ID supplied
        404:
          description: Subtenant not found
        405:
          description: Validation exception
  /subtenant/listSubtenants:
    get:
      summary: List all Subtenants
      operationId: listSubtenants
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subtenant'
        400:
          description: Invalid status value
  '/subtenant/seedPets/{store}/{numPets}':
    get:
      summary: See pet database
      operationId: seedPets
      parameters:
      - name: store
        in: path
        description: Store to seed
        required: true
        schema:
          type: string
      - name: numPets
        in: path
        description: Number of pets to seed
        required: true
        schema:
          type: integer
        default: 10
      responses:
        200:
          description: Success
  '/suspendTenantUser/{tenantUser}':
    get:
      summary: Suspend TenantUser
      operationId: suspendTenantUser
      parameters:
      - name: tenantUser
        in: path
        description: tenantUser login
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
  '/tenantUser/{tenantUserId}':
    get:
      summary: Find tenantUser by ID
      operationId: getTenantUserById
      x-lz-gencall: TenantUserRepo.ReadAsync(callerInfo, tenantUserId)
      parameters:
      - name: tenantUserId
        in: path
        description: ID of tenantUser that needs to be fetched
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantUser'
        400:
          description: Invalid ID supplied
        404:
          description: TenantUser not found
  '/tenantUser/delete/{tenantUserId}':
    delete:
      summary: Delete tenantUser by ID
      operationId: deleteTenantUser
      x-lz-gencall: TenantUserRepo.DeleteAsync(callerInfo, tenantUserId)
      parameters:
      - name: tenantUserId
        in: path
        description: ID of tenantUser that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: TenantUser not found
  '/subtenant/{subtenantId}':
    get:
      summary: Find Subtenant by ID
      operationId: getSubtenantById
      parameters:
      - name: SubtenantId
        in: path
        description: ID of Subtenant that needs to be fetched
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subtenant'
        400:
          description: Invalid ID supplied
        404:
          description: Subtenant not found
  '/subtenant/delete/{subtenantId}':
    delete:
      summary: Delete Subtenant by ID
      operationId: deleteSubtenant
      parameters:
      - name: SubtenantId
        in: path
        description: ID of Subtenant that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: Subtenant not found
components:
  schemas:
    Blurb:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    Message:
      type: object
      properties:
        id:
          type: string
        blurbId:
          type: string
        premiseId:
          type: string
        body:
          type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Premise:
      type: object
      properties:
        id:
          type: string
        blurbId:
          type: string
        body:
          type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Chat:
      type: object
      properties:
        id:
          type: string
        blurbId:
          type: string
        premiseId:
          type: string
        body:
          type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Preferences:
      type: object
      properties:
        id:
          type: string
        theme:
          type: string
          enum:
          - light
          - dark
        locale:
          type: string
          enum:
          - en
          - fr
          - es
        petStatus:
          description: pet status in the store
          $ref: '#/components/schemas/PetStatus'
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        pet:
          $ref: '#/components/schemas/Pet'
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
    Tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
    Pet:
      type: object
      required:
      - name
      - photoUrls
      properties:
        id:
          type: string
        category:
          type: string
        name:
          type: string
          example: Dog
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        petStatus:
          description: pet status in the store
          default: available
          $ref: '#/components/schemas/PetStatus'
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    PetStatus:
      type: string
      description: pet status in the store
      enum:
      - available
      - pending
      - sold
    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          description: Cognito Identity Id of clerk entering order
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        orderStatus:
          title: orderStatus
          description: Order Status
          $ref: '#/components/schemas/OrderStatus'
        complete:
          type: boolean
          default: false
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    OrderStatus:
      type: string
      description: Order Status
      enum:
      - placed
      - approved
      - delivered
    Subtenant:
      type: object
      x-csharp-type: TenancyConfig
    TenantUser:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
          nullable: true
        name:
          type: string
        email:
          type: string
        phone:
          type: string
          nullable: true
        employee:
          type: boolean
        admin:
          type: boolean
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    TenantUserStatus:
      type: object
      properties:
        isAdmin:
          type: boolean
      x-lz-genrepo: true
    Bada:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
...
