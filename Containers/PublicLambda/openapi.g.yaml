openapi: 3.0.1
paths:
  /public/pet/listPets:
    get:
      summary: List all pets
      operationId: listPets
      x-lz-gencall: PetRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
  /public/pet/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - name: petStatus
        in: query
        description: Status values that need to be considered for filter
        required: true
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/PetStatus'
          default: available
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
  /public/pet/findByTags:
    get:
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid tag value
  /public/pet/categories:
    get:
      summary: Get all Pet Categories
      operationId: getPetCategories
      x-lz-gencall: CategoryRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /public/pet/tags:
    get:
      summary: Get all Pet Tags
      operationId: getPetTags
      x-lz-gencall: TagRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /blurb/seed:
    get:
      summary: seed blurb for test
      description: create blrub with chat
      operationId: seedBlurb
      x-lz-gencall: BlurbRepo.SeedBlurbAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blurb'
        400:
          description: Invalid ID supplied
        404:
          description: Blurb not found
  /blurb:
    post:
      summary: Add a new blurb to the store
      operationId: createBlurb
      x-lz-gencall: BlurbRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blurb'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blurb'
        405:
          description: Invalid input
    put:
      summary: Update an existing blurb
      operationId: updateBlurb
      x-lz-gencall: BlurbRepo.UpdateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blurb'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blurb'
        400:
          description: Invalid ID supplied
        404:
          description: Blurb not found
        405:
          description: Validation exception
  /blurb/listBlurbs:
    get:
      summary: List all blurbs
      operationId: listBlurbs
      x-lz-gencall: BlurbRepo.ListAsync(callerInfo)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blurb'
        400:
          description: Invalid status value
  /blurb/ListByStatus:
    get:
      summary: List Blurbs by status
      description: Status
      operationId: listBlurbsByStatus
      x-lz-gencall: BlurbRepo.ListBlurbsByStatusAsync(callerInfo, blurbStatus)
      parameters:
      - name: blurbStatus
        in: query
        description: Status value
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blurb'
        400:
          description: Invalid status value
  /message:
    post:
      summary: Add a new message to the store
      operationId: createMessage
      x-lz-gencall: MessageRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        405:
          description: Invalid input
    put:
      summary: Update an existing message
      operationId: updateMessage
      x-lz-gencall: MessageRepo.UpdateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Invalid ID supplied
        404:
          description: Message not found
        405:
          description: Validation exception
  /premise:
    post:
      summary: Add a new premise to the store
      operationId: createPremise
      x-lz-gencall: PremiseRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Premise'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Premise'
        405:
          description: Invalid input
    put:
      summary: Update an existing premise
      operationId: updatePremise
      x-lz-gencall: PremiseRepo.UpdateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Premise'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Premise'
        400:
          description: Invalid ID supplied
        404:
          description: Premise not found
        405:
          description: Validation exception
  /chat:
    post:
      summary: Add a new chat to the store
      operationId: createChat
      x-lz-gencall: ChatRepo.CreateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        405:
          description: Invalid input
    put:
      summary: Update an existing chat
      operationId: updateChat
      x-lz-gencall: ChatRepo.UpdateAsync(callerInfo, body)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        400:
          description: Invalid ID supplied
        404:
          description: Chat not found
        405:
          description: Validation exception
  '/public/pet/{petId}':
    get:
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      x-lz-gencall: PetRepo.ReadAsync(callerInfo, petId)
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
  '/blurb/{blurbId}':
    get:
      summary: Read blurb by ID
      description: Returns a single blurb
      operationId: readBlurbById
      x-lz-gencall: BlurbRepo.ReadAsync(callerInfo, blurbId)
      parameters:
      - name: blurbId
        in: path
        description: ID of blurb to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blurb'
        400:
          description: Invalid ID supplied
        404:
          description: Blurb not found
    delete:
      summary: Deletes a blurb
      operationId: deleteBlurb
      x-lz-gencall: BlurbRepo.DeleteAsync(callerInfo, blurbId)
      parameters:
      - name: blurbId
        in: path
        description: Blurb id to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: Blurb not found
  '/message/{messageId}':
    get:
      summary: Read message by ID
      description: Returns a single message
      operationId: readMessageById
      x-lz-gencall: MessageRepo.ReadAsync(callerInfo, messageId)
      parameters:
      - name: messageId
        in: path
        description: ID of message to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Invalid ID supplied
        404:
          description: Message not found
    delete:
      summary: Deletes a message
      operationId: deleteMessage
      x-lz-gencall: MessageRepo.DeleteAsync(callerInfo, messageId)
      parameters:
      - name: messageId
        in: path
        description: Message id to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: Message not found
  '/message/ListByChatId/{chatId}':
    get:
      summary: List Messages by ChatId
      description: Lists messages by chatId
      operationId: listMessagesByChatId
      x-lz-gencall: MessageRepo.ListMessagesByChatIdAsync(callerInfo, chatId)
      parameters:
      - name: chatId
        in: query
        description: ChatId message belongs to
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        400:
          description: Invalid status value
  '/premise/{premiseId}':
    get:
      summary: Read premise by ID
      description: Returns a single premise
      operationId: readPremiseById
      x-lz-gencall: PremiseRepo.ReadAsync(callerInfo, premiseId)
      parameters:
      - name: premiseId
        in: path
        description: ID of premise to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Premise'
        400:
          description: Invalid ID supplied
        404:
          description: Premise not found
    delete:
      summary: Deletes a premise
      operationId: deletePremise
      x-lz-gencall: PremiseRepo.DeleteAsync(callerInfo, premiseId)
      parameters:
      - name: premiseId
        in: path
        description: Premise id to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: Premise not found
  '/premise/listByBlurbId/{blurbId}':
    get:
      summary: List Premises by blurbId
      description: List Premiess by blurbId
      operationId: listPremisesByBlurbId
      x-lz-gencall: PremiseRepo.ListPremisesByBlurbIdAsync(callerInfo, blurbId)
      parameters:
      - name: blurbId
        in: query
        description: BlurbId the premise belongs to
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Premise'
        400:
          description: Invalid blurbId value
  '/chat/{chatId}':
    get:
      summary: Read chat by ID
      description: Returns a single chat
      operationId: readChatById
      x-lz-gencall: ChatRepo.ReadAsync(callerInfo, chatId)
      parameters:
      - name: chatId
        in: path
        description: ID of chat to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        400:
          description: Invalid ID supplied
        404:
          description: Chat not found
    delete:
      summary: Deletes a chat
      operationId: deleteChat
      x-lz-gencall: ChatRepo.DeleteAsync(callerInfo, chatId)
      parameters:
      - name: chatId
        in: path
        description: Chat id to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: Chat not found
  '/chat/listByBlurbId/{blurbId}':
    get:
      summary: List Chats by blurbId
      description: blurbId value chat belongs to
      operationId: listChatsByBlurbId
      x-lz-gencall: ChatRepo.ListChatsByBlurbIdAsync(callerInfo, blurbId)
      parameters:
      - name: blurbId
        in: query
        description: BlurbId chat belongs to
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
        400:
          description: Invalid blurbId value
  '/chat/listByPremiseId/{premiseId}':
    get:
      summary: List Chats by premiseId
      description: premiseId value chat belongs to
      operationId: listChatsByPremiseId
      x-lz-gencall: ChatRepo.ListChatsByPremiseIdAsync(callerInfo, premiseId)
      parameters:
      - name: premiseId
        in: query
        description: PremiseId chat belongs to
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
        400:
          description: Invalid premiseId value
components:
  schemas:
    Blurb:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    Message:
      type: object
      properties:
        id:
          type: string
        blurbId:
          type: string
        premiseId:
          type: string
        body:
          type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Premise:
      type: object
      properties:
        id:
          type: string
        blurbId:
          type: string
        body:
          type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Chat:
      type: object
      properties:
        id:
          type: string
        blurbId:
          type: string
        premiseId:
          type: string
        body:
          type: string
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Preferences:
      type: object
      properties:
        id:
          type: string
        theme:
          type: string
          enum:
          - light
          - dark
        locale:
          type: string
          enum:
          - en
          - fr
          - es
        petStatus:
          description: pet status in the store
          $ref: '#/components/schemas/PetStatus'
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        pet:
          $ref: '#/components/schemas/Pet'
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
    Tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
    Pet:
      type: object
      required:
      - name
      - photoUrls
      properties:
        id:
          type: string
        category:
          type: string
        name:
          type: string
          example: Dog
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        petStatus:
          description: pet status in the store
          default: available
          $ref: '#/components/schemas/PetStatus'
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    PetStatus:
      type: string
      description: pet status in the store
      enum:
      - available
      - pending
      - sold
    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
          description: Cognito Identity Id of clerk entering order
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        orderStatus:
          title: orderStatus
          description: Order Status
          $ref: '#/components/schemas/OrderStatus'
        complete:
          type: boolean
          default: false
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    OrderStatus:
      type: string
      description: Order Status
      enum:
      - placed
      - approved
      - delivered
    Subtenant:
      type: object
      x-csharp-type: TenancyConfig
    TenantUser:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
          nullable: true
        name:
          type: string
        email:
          type: string
        phone:
          type: string
          nullable: true
        employee:
          type: boolean
        admin:
          type: boolean
        createUtcTick:
          type: integer
          format: int64
        updateUtcTick:
          type: integer
          format: int64
      x-lz-genrepo: true
    TenantUserStatus:
      type: object
      properties:
        isAdmin:
          type: boolean
      x-lz-genrepo: true
    Bada:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-lz-genrepo: true
...
